#include <stdio.h>
#include <math.h>

// Function to calculate greatest common divisor (GCD)
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int main() {
    int p = 7; // Replace with a prime number
    int q = 11; // Replace with another prime number
    int n = p * q;
    int phi = (p - 1) * (q - 1);
    int e = 17; // Replace with a suitable public exponent
    int d;

    // Ensure e and phi are coprime
    while (gcd(e, phi) != 1) {
        e++;
    }

    // Calculate the private key d
    int k = 1;
    while (1) {
        d = (k * phi + 1) / e;
        if ((k * phi + 1) % e == 0)
            break;
        k++;
    }

    int plaintext = 42; // Replace with your message
    int ciphertext = fmod(pow(plaintext, e), n);
    int decrypted = fmod(pow(ciphertext, d), n);

    printf("Plaintext: %d\n", plaintext);
    printf("Ciphertext: %d\n", ciphertext);
    printf("Decrypted: %d\n", decrypted);

    return 0;
}
